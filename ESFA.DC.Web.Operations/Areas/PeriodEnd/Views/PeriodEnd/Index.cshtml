@using ESFA.DC.Web.Operations.Constants
@model ESFA.DC.Web.Operations.Areas.PeriodEnd.Models.PeriodEndViewModel
@{
    ViewData["Title"] = "Index";
    ViewData[ViewDataConstants.BackLink] = "/periodend/periodEndPreparation";
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-one-third">
        Path summary goes here
    </div>

    <div class="govuk-grid-column-two-thirds">
        <h1 class="govuk-heading-xl" style="margin-bottom: 10px;">Period end</h1>
        <br />
        <h2 class="govuk-heading-l">Period R@(Model.Period.ToString().PadLeft(2, '0')) of Year @Model.Year</h2>


        <br />
        <br />

        <button type="submit" class="govuk-button customised" style="margin-left: 0;" id="startPeriodEnd"
                onclick="window.periodEndClient.startPeriodEnd(@Model.Year, @Model.Period);return false;"
                @(Model.Closed ? string.Empty : "disabled" )>
            Start Period End
        </button>

        <br />
        <br />

        <div>
            <ol id="pathContainer" class="app-task-list"></ol>
        </div>

        <br />
        <br />

        @using (Html.BeginForm("PublishMcaReports", "PeriodEnd", FormMethod.Post, new { @class = "app-task-list__section" }))
        {
            <input type="hidden" name="collectionYear" value="@Model.Year" />
            <input type="hidden" name="period" value="@Model.Period" />
            <input type="submit" class="govuk-button customised" style="margin-left: 0;" id="publishReports" value="Publish MCA Reports">
        }

        <br />
        <br />

        @*@if (Model != null && Model.Period == Model.CurrentPeriod)
            {*@
        @using (Html.BeginForm("PublishProviderReports", "PeriodEnd", FormMethod.Post, new { @class = "app-task-list__section" }))
        {
            <input type="hidden" name="collectionYear" value="@Model.Year" />
            <input type="hidden" name="period" value="@Model.Period" />
            <input type="submit" class="govuk-button customised" style="margin-left: 0;" id="publishReports" value="Publish Provider Reports">
        }
        @*}*@

        <br />
        <br />

        @*@if (Model != null && Model.Period == Model.CurrentPeriod)
            {*@
        @using (Html.BeginForm("ClosePeriodEnd", "PeriodEnd", FormMethod.Post, new { @class = "app-task-list__section" }))
        {
            <input type="hidden" name="collectionYear" value="@Model.Year" />
            <input type="hidden" name="period" value="@Model.Period" />
            <input type="submit" class="govuk-button customised" style="margin-left: 0;" id="publishReports" value="Close Period End">
        }
        @*}*@

        <br />
        <br />

        @using (Html.BeginForm("UnPauseReferenceJobs", "PeriodEnd", FormMethod.Post, new { @class = "app-task-list__section" }))
        {
            <input type="hidden" name="collectionYear" value="@Model.Year" />
            <input type="hidden" name="period" value="@Model.Period" />
            <input type="submit" class="govuk-button customised" style="margin-left: 0;" id="resumeReferenceData" value="Resume Reference Data Jobs">
        }
    </div>
</div>

<br />

<div class="govuk-grid-row">
    <div class="govuk-grid-column-one-third">&nbsp;</div>
    <div class="govuk-grid-column-two-thirds">
        <label id="lastSync"></label>

        <label id="state"></label>
    </div>
</div>

@section PageScripts
{
    @if (Model != null && Model.Closed)
    {
        <script src="~/assets/js/signalr/dist/browser/signalr.js"></script>
    }

    <script type="module">
            import PathController from '/assets/js/periodEnd/pathController.js';
            import Client from '/assets/js/periodEnd/client.js'; 
            
            @if (Model != null && Model.Closed)
            {
                @Html.Raw("import Hub from '/assets/js/hubs/periodEndHub.js';");
                @Html.Raw("const hub = new Hub();");
                @Html.Raw("hub.startHub();");
                @Html.Raw("window.periodEndClient = new Client(hub.getConnection());");
            }

            (function() {
                const paths = '@Html.Raw(Model?.Paths)';
                const pathController = new PathController();

                pathController.renderPaths(paths);
            })();
    </script>
}