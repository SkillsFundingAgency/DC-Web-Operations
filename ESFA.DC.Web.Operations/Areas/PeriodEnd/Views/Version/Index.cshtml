@using ESFA.DC.Web.Operations.Constants
@using Microsoft.ServiceFabric.Common
@model ESFA.DC.Web.Operations.Models.ServiceFabric.RootObject
@{
    ViewData["Title"] = "ServiceFabric";
    ViewData[ViewDataConstants.BackLink] = "/periodend/periodEndPreparation";
}


<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
        <h2 class="govuk-heading-m">ServiceFabric Applications</h2>

        <table class="govuk-table">
            <thead class="govuk-table__head">
            <tr class="govuk-table__row">
                <td class="govuk-table__header">Name</td>
                <td class="govuk-table__header">Version</td>
                <td class="govuk-table__header">HealthState</td>
                <td class="govuk-table__header">Status</td>
            </tr>
            </thead>
            @foreach (var data in Model.Items)
            {
                <tr class="govuk-table__row">
                    <td class="govuk-table__cell">
                        @data.TypeName
                    </td>
                    <td class="govuk-table__cell">
                        @data.TypeVersion
                    </td>
                    <td class="govuk-table__cell">
                        @data.HealthState
                    </td>
                    <td class="govuk-table__cell">
                        @data.Status
                    </td>
                </tr>
            }
        </table>
    </div>
</div>

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
        <h2 class="govuk-heading-m">ServiceFabric Nodes</h2>

        <table class="govuk-table">
            <thead class="govuk-table__head">
                <tr class="govuk-table__row">
                    <td class="govuk-table__header">Node Type</td>
                    <td class="govuk-table__header">Count</td>
                    <td class="govuk-table__header">Healthy</td>
                    <td class="govuk-table__header">Bad</td>
                </tr>
            </thead>
            @foreach (var nodeGroup in @Model.NodeItems.GroupBy(x => x.Type).Select(y => new { y.Key, NodeCount = y.Count() }))
            {
                <tr class="govuk-table__row">
                    <td class="govuk-table__cell">
                        @nodeGroup.Key
                    </td>
                    <td class="govuk-table__cell">
                        @nodeGroup.NodeCount
                    </td>
                    <td class="govuk-table__cell">
                        @Model.NodeItems.Count(x => x.HealthState.HasValue && x.HealthState == HealthState.Ok && x.Type.Equals(nodeGroup.Key))
                    </td>
                    <td class="govuk-table__cell">
                        @Model.NodeItems.Count(x => (!x.HealthState.HasValue || x.HealthState != HealthState.Ok) && x.Type.Equals(nodeGroup.Key))
                    </td>
                </tr>
            }
        </table>
    </div>
</div>