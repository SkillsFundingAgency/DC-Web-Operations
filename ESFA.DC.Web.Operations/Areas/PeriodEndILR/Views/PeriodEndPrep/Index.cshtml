@using ESFA.DC.Web.Operations.Utils
@using ESFA.DC.Web.Operations.Constants
@model ESFA.DC.Web.Operations.Areas.PeriodEndILR.Models.PeriodEndPrepViewModel

@{
    ViewData["Title"] = "Index";
}

<div class="govuk-breadcrumbs">
    <ol class="govuk-breadcrumbs__list">
        <li class="govuk-breadcrumbs__list-item">
            <a class="govuk-breadcrumbs__link" href="/">Home</a>
        </li>
        <li class="govuk-breadcrumbs__list-item">
            <a class="govuk-breadcrumbs__link" href="/periodend/periodEnd">Period end</a>
        </li>
        <li class="govuk-breadcrumbs__list-item" aria-current="page">ILR</li>
    </ol>
</div>

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
        <h1 class="govuk-heading-xl heading-bottom-margin">Period end</h1>
        <br />
        <h2 class="govuk-heading-l">Period R@(Model.Period.ToString().PadLeft(2, '0')) of Year @Model.Year</h2>
    </div>
</div>

<div class="govuk-grid-row">
    <div class="govuk-grid-column-one-third">
        <ul class="govuk-list">
            <li>
                @Html.ActionLink("Reports", "Index", "PeriodEndReport", new { area = AreaNames.PeriodEndILR }, new { @class = "govuk-link" })
            </li>
            <li>
                @Html.ActionLink("History", "Index", "History", new { area = AreaNames.PeriodEndILR }, new { @class = "govuk-link" })
            </li>
            <li>
                @Html.ActionLink("Validity Periods", "Index", "ValidityPeriod", new { area = AreaNames.PeriodEndILR }, new { @class = "govuk-link" })
            </li>
        </ul>
    </div>

    <div class="govuk-grid-column-two-thirds">

        <h2 class="govuk-heading-m">MCAs</h2>

        <label id="mcaLabel"></label>
        <br />
        <br />

        <div class="flex space-between">
            <h2 class="govuk-heading-m">SLD/DAS mismatches</h2>
        </div>

        <label id="sldDasMismatch"></label>
        <br />
        <br />

        @if (Model != null)
        {
            <div class="flex space-between">
                <h2 class="govuk-heading-m">Failed submissions</h2>
            </div>

            <div id="failedJobContainer"></div>
        }

        <br />
        <br />

        @if (Model != null)
        {
            <h2 class="govuk-heading-m">Reference data jobs</h2>

            <button class="govuk-button" id="pause-all-jobs" disabled>
                Pause reference data jobs
            </button>

            <div class="confirm-pause" id="confirm-pause" style="display: none;">
                <h3 class="govuk-heading-s">Are you sure?</h3>

                <p>These reference data jobs can’t be resumed until the period end process is complete.</p>

                <p>
                    <button type="submit" class="govuk-button yes-pause no-left-margin" id="pauseReferenceData"
                            onclick="window.prepClient.pauseReferenceDataJobs(@Model.Year, @Model.Period);">
                        Yes, pause jobs.
                    </button>
                    &nbsp; &nbsp; &nbsp;
                    <a href="#" class="govuk-link cancel-pause" id="cancel-pause">Cancel</a>
                </p>

            </div>

            <div class="govuk-panel govuk-panel--confirmation pause-confirmation" id="pause-confirmation" style="display: none;">
                <h1 class="govuk-panel__title govuk-!-font-size-27">
                    All reference data jobs have been paused
                </h1>
            </div>

            <table class="govuk-table">
                <thead class="govuk-table__head">
                    <tr class="govuk-table__row">
                        <th class="govuk-table__header" scope="col">Job</th>
                        <th class="govuk-table__header" scope="col">Status</th>
                    </tr>
                </thead>
                <tbody class="govuk-table__body" id="referenceDataContainer"></tbody>
            </table>
        }

        <br />
        <br />

        <button class="govuk-button customised" id="collectionClosed"
                onclick="window.prepClient.collectionClosedEmail(@Model.Year, @Model.Period, '@CollectionTypes.ILR');" disabled>
            Send Collection Closed Email
        </button>

        <br />
        <br />

        @using (Html.BeginForm("StartPeriodEnd", "PeriodEndPrep", FormMethod.Post, new { @class = "app-task-list__section" }))
        {
            <input type="hidden" name="collectionYear" value="@Model.Year" />
            <input type="hidden" name="period" value="@Model.Period" />
            <input type="submit" class="govuk-button customised" id="startPeriodEnd" value="Continue" disabled>
        }
    </div>
</div>

<br />

<div class="govuk-grid-row">
    <div class="govuk-grid-column-one-third">&nbsp;</div>
    <div class="govuk-grid-column-two-thirds">
        <label id="slowConnection" alt="Connection is slow at the moment"></label>
        <label id="lastSync"></label>
        <label id="state"></label>
    </div>
</div>

@section PageScripts
{
    <script src="~/lib/signalr/dist/browser/signalr.js" asp-append-version="true"></script>

    <script type="module">
        import JobController from "/assets/js/periodEnd/jobController.js";
        import Confirm from '/assets/js/periodEnd/confirmationController.js';

        const jobController = new JobController();

        @if (Model != null && Model.IsCurrentPeriod && !Model.PeriodEndPrepModel.State.PeriodEndFinished)
        {
            <text>
                import Client from '/assets/js/periodEnd/client.js';
                import Hub from '/assets/js/hubs/hub.js';
                const hub = new Hub('periodEndPrepHub', jobController.displayConnectionState);
                jobController.registerHandlers(hub);
                hub.startHub();
                window.prepClient = new Client(hub.getConnection());
            </text>
        }

        (function() {
            const periodClosed = '@Html.Raw(Model?.PeriodEndPrepModel.State.CollectionClosed)';
            const state = @Json.Serialize(Model?.PeriodEndPrepModel);
            const collectionClosedEmailSent = '@Html.Raw(Model?.PeriodEndPrepModel.State.CollectionClosedEmailSent)';
            const periodEndFinished = '@Html.Raw(Model?.PeriodEndPrepModel.State.PeriodEndFinished)';
            const confirm = new Confirm();

            confirm.initialiseConfirmation(state, periodClosed, collectionClosedEmailSent, periodEndFinished);

            jobController.renderJobs(state);

            @if (!Model?.IsCurrentPeriod ?? false)
            {
                <text>
                    const dateLabel = document.getElementById(`lastSync`);
                    dateLabel.textContent = `Updates disabled as historical period end`;
                </text>
            }
        })();
    </script>
}