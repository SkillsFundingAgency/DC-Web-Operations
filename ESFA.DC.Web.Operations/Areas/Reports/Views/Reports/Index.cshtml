@using ESFA.DC.Web.Operations.Constants
@using ESFA.DC.Web.Operations.Utils

@model ESFA.DC.Web.Operations.Areas.Reports.Models.ReportsViewModel

@{
    ViewData["Title"] = "Index";
    ViewData[ViewDataConstants.BackLink] = "/Home";
}

<form>
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-full">
            <h1 class="govuk-heading-xl" style="margin-bottom: 10px;">Reports</h1>
            <br />
            <h2 class="govuk-heading-l">Period: @Model.CollectionYear R@(Model?.CollectionPeriod.ToString().PadLeft(2, '0'))</h2>
            <input type="hidden" name="year" id="year" value=@Model.CollectionYear />
            <input type="hidden" name="period" id="period" value=@Model.CollectionPeriod />
        </div>
    </div>

    <div class="govuk-grid-row">
        <div class="govuk-grid-column-full">
            <table class="govuk-table">
                <tbody class="govuk-table__body">
                    <tr class="govuk-table__row">
                        <td class="govuk-table__cell">
                            Change period to:
                            <select id="collectionYears" asp-for="CollectionYear" class="govuk-select govuk-input--width-10 form-control">
                                <option value="1920">1920</option>
                                <option value="1819">1819</option>
                            </select>

                            <select asp-for="CollectionPeriod" class="govuk-select govuk-input--width-10 form-control">
                                <option value="1">R01</option>
                                <option value="2">R02</option>
                                <option value="3">R03</option>
                                <option value="4">R04</option>
                                <option value="5">R05</option>
                                <option value="6">R06</option>
                                <option value="7">R07</option>
                                <option value="8">R08</option>
                                <option value="9">R09</option>
                                <option value="10">R10</option>
                                <option value="11">R11</option>
                                <option value="12">R12</option>
                                <option value="13">R13</option>
                                <option value="14">R14</option>
                            </select>

                            <button class="govuk-button" type="submit" data-module="govuk-button" id="changePeriod" onclick="changePeriodButton()">Change period</button>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <br />

    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds">
            <h2 class="govuk-heading-m">Internal Reports</h2>
            <table class="govuk-table">
                <thead class="govuk-table__head">
                    <tr class="govuk-table__row">
                        <th class="govuk-table__header" scope="col">Report name</th>
                        <th class="govuk-table__header" scope="col">Download</th>
                    </tr>
                </thead>
                <tbody class="govuk-table__body">
                    @if (Model?.Reports != null && Model.Reports.Any())
                    {
                        foreach (var reportDetail in Model.Reports.Where(rd => !string.IsNullOrEmpty(rd.Url)))
                        {
                            if (!string.IsNullOrEmpty(reportDetail?.DisplayName)
                                && !string.IsNullOrEmpty(reportDetail?.Url))
                            {
                                <tr class="govuk-table__row">
                                    <td class="govuk-table__cell">@reportDetail.DisplayName</td>
                                    <td class="govuk-table__cell">
                                        @Html.ActionLink(reportDetail.Url, "GetReportFile", new { collectionYear = Model.CollectionYear, collectionPeriod = Model.CollectionPeriod, fileName = @Html.Encode(reportDetail.Url) })
                                    </td>
                                </tr>
                            }
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(@ViewBag.Error))
    {
        <div>
            <div class="govuk-grid-row">
                <div class="govuk-grid-column-two-thirds">
                    <h4 class="govuk-error-message">The following error occured during processing: <br /><br />@ViewBag.Error</h4>
                </div>
            </div>
        </div>
    }

    <div class="govuk-grid-row">
        <div class="govuk-grid-column-full">
            <table class="govuk-table">
                <tbody class="govuk-table__body">
                    <tr class="govuk-table__row">
                        <td class="govuk-table__cell">
                            Create new report for:
                            <select id="reportSelection" asp-for="ReportType" class="govuk-select govuk-input--width-20 form-control">
                                <option value="PeriodEndDataQualityReport">Period End Data Quality Report</option>
                                <option value="ProviderSubmissionsReport">Provider Submissions Report</option>
                                <option value="PeriodEndMetricsReport">Period End Metrics Report</option>
                                <option value="PeriodEndDataExtractReport">Period End Data Extract Report</option>
                                <option value="InternalDataMatchReport">Internal Data Match Report</option>
                                <option value="ACTCountReport">ACT Count Report</option>
                                <option value="RuleValidationDetailReport">Rule Validation Detail Report</option>
                            </select>

                            <button class="govuk-button" type="submit" data-module="govuk-button" id="createReport" onclick="createReportButton();">Create report</button>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</form>

<div id="ruleValidationDetailReportSection">
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds">
            <span id="spinner" class="loading-spinner" style="display: block;position: absolute;left: auto;right: auto;"><img src="~/assets/images/loading-spinner.gif" alt="loading-icon"></span>
            <h1 class="govuk-heading-xl">Search for a validation rule</h1>
        </div>
        <div class="govuk-grid-row govuk-grid-column-two-thirds">
          <div class="govuk-grid-column-two-thirds">
                <div id="tt-overlay">
                    <div id="tt-overlay" class="autocomplete-wrapper"></div>
                </div>
            </div>
            <div class="govuk-grid-column-one-third">
                <button data-prevent-double-click="true" class="govuk-button" type="submit" data-module="govuk-button" id="generateValidationReport">Generate Report</button>
            </div>
        </div>
    </div>
</div>
<div class="govuk-grid-row">
    <div class="govuk-grid-column-one-third">&nbsp;</div>
    <div class="govuk-grid-column-two-thirds">
        <label id="state"></label>
    </div>
</div>
<script src="~/assets/js/signalr/dist/browser/signalr.js"></script>
<script src="~/assets/minified/accessible-autocomplete.min.js"></script>
<script language="javascript" type="module">

    import Client from '/assets/js/reports/client.js';
    import Hub from '/assets/js/hubs/reportsHub.js';

    const hub = new Hub();
    hub.startHub();
    window.reportClient = new Client(hub.getConnection());

    var reportSelection = document.getElementById('reportSelection');
    var ruleValidationDetailReportSection = document.getElementById('ruleValidationDetailReportSection');
    var createReportBtn = document.getElementById('createReport');
    var generateValidationReportButton = document.getElementById("generateValidationReport");
    var element = document.querySelector('#tt-overlay');
    var id = 'autocomplete-overlay';
    var spinner = document.getElementById('spinner');
    var collectionYears = {};
    var rulesByYear = {};
    var yearSelected;
    var ruleSelected;
    hideValidationRuleDetailReportSection();
    document.getElementById("collectionYears").addEventListener("change", yearsSelectionChange);
    document.getElementById("generateValidationReport").addEventListener("click", generateValidationDetailReport);

    reportSelection.onchange = function(e) {
        var reportSelected = this.options[this.selectedIndex].value;
        if (reportSelected === 'RuleValidationDetailReport') {
            showValidationRuleDetailReportSection();
        } else {
            hideValidationRuleDetailReportSection();
        }
    };

    function yearsSelectionChange(e) {
        var reportSelected = reportSelection.value;
        if (reportSelected === 'RuleValidationDetailReport') {
            yearSelected = this.options[this.selectedIndex].text;
            removeElementsByClass('autocomplete__wrapper');
            spinner.style.visibility = 'visible';
            if (rulesByYear[yearSelected] === undefined) {
                window.reportClient.getValidationRules(yearSelected, populateRules);
            } else {
                populateRules(rulesByYear[yearSelected]);
            }
        }
    };

    function showValidationRuleDetailReportSection() {
        if (Object.keys(collectionYears).length === 0) {
            var yearSelected = document.getElementById("year").value;
            spinner.style.visibility = 'visible';
            createReportBtn.style.visibility = 'hidden';
            removeElementsByClass('autocomplete__wrapper');
            if (rulesByYear[yearSelected] === undefined) {
                window.reportClient.getValidationRules(yearSelected, populateRules);
            } else {
                populateRules(rulesByYear[yearSelected]);
            }
        }
        ruleValidationDetailReportSection.style.visibility = 'visible';
    }

    function hideValidationRuleDetailReportSection() {
        ruleValidationDetailReportSection.style.visibility = 'hidden';
        createReportBtn.style.visibility = 'visible';
    }

    function populateRules(rules) {
        rulesByYear[yearSelected] = rules;
        accessibleAutocomplete({
            element: element,
            id: id,
            displayMenu: 'overlay',
            confirmOnBlur: false,
            showNoOptionsFound: false,
            source: rules,
            onConfirm: searchRulesOnConfirm,
            placeholder: 'e.g Rule_01'
        });
        spinner.style.visibility = 'hidden';
    }

    function removeElementsByClass(className){
        var elements = document.getElementsByClassName(className);
        while(elements.length > 0){
            elements[0].parentNode.removeChild(elements[0]);
        }
    }

    function searchRulesOnConfirm(result) {
        ruleSelected = result;
    }

    function generateValidationDetailReport() {
        spinner.style.visibility = 'visible';
        var year = document.getElementById("year").value;
        window.location.href = '@Url.Action("ValidationRulesReport", "RuleValidation")?year=' + year + '&rule=' + ruleSelected;
    }

    function changePeriodButton() {
        var yearValue = document.getElementById("year").value;
        var periodValue = document.getElementById("period").value;
        var reportValue = document.getElementById("ReportType").value;
        window.location.href = "/reports/Index/" + reportValue + "/" + yearValue + "/" + periodValue;
        event.preventDefault();
        return false;
    }

    function createReportButton() {
        var reportValue = document.getElementById("ReportType").value;
        var yearValue = document.getElementById("year").value;
        var periodValue = document.getElementById("period").value;

        window.location.href = "/reports/RunReport/" + reportValue + "/" + yearValue + "/" + periodValue;
        event.preventDefault();
        return false;
    }
</script>

