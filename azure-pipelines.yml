### NOT USED YET
#name:  $(GitVersion.NuGetVersion)
name: $(GitVersion.SemVer)

parameters:
- name: BuildConfiguration
  displayName: Release or Debug
  type: string
  default: Release
  values:
  - Release
  - Debug

resources:
- repo: self
  fetchDepth: 30

variables:
  BuildPlatform: 'Any CPU'

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    variables:
      "Nuget.Feed": 'dct-pkg'  
      "Nuget.Version": '5.3.0'
      "DotnetCore.Version": '2.2.x'
      
    pool:
      name: DCT
      demands:
      - IsBuildServer

    steps:

    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk : $(DotnetCore.Version)'
      inputs:
        packageType: sdk
        version: $(DotnetCore.Version)
        performMultiLevelLookup: true
        
#    - task: NuGetToolInstaller@0
#      displayName: 'Use NuGet : $(Nuget.Version)'
#      inputs:
#        versionSpec: '> $(Nuget.Version)'
#        checkLatest: true

    - task: gittools.gitversion.gitversion-task.GitVersion@4
      displayName: use Git Version to generate build number
      inputs:
        updateAssemblyInfo: true
        preferBundledVersion: false
    
    - task: UseNode@1
      displayName: 'Use Node 12.x'
      inputs:
        version: 12.x
        checkLatest: true

    # Generate the report using ReportGenerator (https://github.com/danielpalme/ReportGenerator)
    # First install the tool on the machine, then run it
    - script: dotnet tool update dotnet-reportgenerator-globaltool  --version 4.3.6
      displayName: Install/update dotnet-reportgenerator-globaltool
      continueOnError: true  
      enabled: false

    - task: DeleteFiles@1
      displayName: 'Delete appsettings.Development.json'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: |
         **/appsettings.Development.json
     
#********************************************************************************
# Display Variables
#********************************************************************************   
    - task: PowerShell@2
      enabled: false
      name: DislayAllVariables2
      displayName: 'Display all variables'
      continueOnError: true  
      inputs:
        targetType: 'inline'
        script: |
            (gci env:*).GetEnumerator() | Sort-Object Name | ForEach {Write-Host "Name: $($_.Name) | Value : $($_.Value)"}

#********************************************************************************
# Build and Restore
#********************************************************************************   
    - task: Npm@1
      displayName: 'NPM Install'
      inputs:
        command: 'install'
        workingDir: '$(Build.SourcesDirectory)/ESFA.DC.Web.Operations'
        verbose: false

    - task: DotNetCoreCLI@2
      displayName: 'Restore Nuget packages'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
        configuration: $(BuildConfiguration) 
        feedsToUse: 'select'
        vstsFeed: $(Nuget.Version)

    - task: DotNetCoreCLI@2
      displayName: Build Projects
      inputs:
        workingDirectory: "$(Build.SourcesDirectory)/"
        projects: '**/*.csproj'
        command: build
        arguments: "--configuration ${{ parameters.BuildConfiguration }} --no-restore -p:version=$(Build.BuildNumber) -p:FileVersion=$(Build.BuildNumber)"

#********************************************************************************
# Copy Nuget Packages into Aftifact Folder before test.
#********************************************************************************   
    - task: CopyFiles@2
      displayName: 'Copy Nuget Interface Packages Files - Artifact NugetInterface Directory'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)'
        Contents: |
         **\*$(Build.Configuration)*\*Interface.nupkg
         !**\packages\**
         !**\bin\x64\**
        TargetFolder: '$(build.artifactstagingdirectory)\Nuget\Interface'
        CleanTargetFolder: true
        flattenFolders: true
    
    - task: CopyFiles@2
      displayName: 'Copy NugetPackages Files - Artifact NugetPackages Directory'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)'
        Contents: |
         **\${{ parameters.BuildConfiguration }}\*.nupkg
         !**\packages\**
         !**\bin\x64\**
        TargetFolder: '$(build.artifactstagingdirectory)\Nuget\Packages'
        CleanTargetFolder: true
        flattenFolders: true
        
#********************************************************************************
# Package Web Application
#********************************************************************************   

    - task: DotNetCoreCLI@2
      displayName: 'Package Api Artifact Folder'
      inputs:
        command: publish
        publishWebProjects: false
        zipAfterPublish: true
        nobuild: true
        projects: '**/*.Web.Operations.csproj'
        arguments: '--configuration ${{ parameters.BuildConfiguration }} --no-build -p:version="$(Build.BuildNumber)" -p:FileVersion="$(Build.BuildNumber)" --output "$(Build.ArtifactStagingDirectory)\Web"'

#********************************************************************************
# SQL database Project Build and Acopy to  Artifact Directory
#********************************************************************************   
    - task: MSBuild@1
      enabled: true
      displayName: 'Build SQL database Project'
      inputs:
        solution: '**/*.Operations.AuditDatabase.sqlproj'
        configuration: '${{ parameters.BuildConfiguration }}'
        msbuildArguments: '-p:version=$(Build.BuildNumber) -p:FileVersion=$(Build.BuildNumber) -p:SkipInvalidConfigurations=true'
        maximumCpuCount: true
        clean: false
        restoreNugetPackages: false
        logProjectEvents: true
        createLogFile: true
        
    - task: CopyFiles@2
      displayName: 'Copy Database Files - Artifact Databases Directory'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)'
        Contents: |
         **\*Database\**\*.dacpac
        TargetFolder: '$(build.artifactstagingdirectory)\Databases'
        CleanTargetFolder: true
        flattenFolders: true

#********************************************************************************
# Count Artifact Files to decide what to Publish
#********************************************************************************    
    - task: PowerShell@2
      enabled: true
      displayName: 'Check What to Publish'
      continueOnError: true  
      inputs:
        targetType: 'inline'
        script: |
                  Write-Host "##vso[task.setvariable variable=PublishArtifact_Web]$(Test-Path '$(build.artifactstagingdirectory)\Web' -PathType Any)";
                  Write-Host "##vso[task.setvariable variable=PublishArtifact_NugetPackages]$(Test-Path '$(build.artifactstagingdirectory)\Nuget' -PathType Any)";
                  Write-Host "##vso[task.setvariable variable=PublishArtifact_Databases]$(Test-Path '$(build.artifactstagingdirectory)\Databases' -PathType Any)";

#********************************************************************************
# Run Unit Tests
#********************************************************************************
    # Run all tests with "/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura" to generate the code coverage file
    - task: DotNetCoreCLI@2
      displayName: Run .net Core Unit Tests
      inputs:
        command: test
        projects: |
            **/*Tests.csproj
            !**/*.Automation.Tests.csproj
        arguments: '--no-build --no-restore --configuration ${{ parameters.BuildConfiguration }} /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'

    - task: Npm@1
      displayName: 'npm test'
      inputs:
        command: custom
        workingDir: 'ESFA.DC.Web.Operations' # location of package.json
        verbose: false
        customCommand: 'run test'
      condition: succeededOrFailed()

#********************************************************************************
# Generate Code Coverage Report and Publish
#********************************************************************************
# need to add Nuget PAckage 'coverlet.msbuild' to  Test Projects.
#
     ## Generate the report using ReportGenerator (https://github.com/danielpalme/ReportGenerator)
    # First install the tool on the machine, then run it
    - script: |
          dotnet tool update -g dotnet-reportgenerator-globaltool --version 4.3.6
          reportgenerator -reports:$(Build.SourcesDirectory)/**/*Tests/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:Cobertura
      displayName: Create Code coverage report
      enabled: true
  
    # Publish the code coverage result (summary and web site)
    # The summary allows to view the coverage percentage in the summary tab
    # The web site allows to view which lines are covered directly in Azure Pipeline
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      enabled: true
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
        reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'
    
    - task: dependency-check-build-task@5
      displayName: 'Run OWASP Dependency Check'
      inputs:
        projectName: 'ESFA.DC.Web.Operations'
        scanPath: '**/*.*'
        format: 'JUNIT'
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        mergeTestResults: true

#********************************************************************************
# Publish Artifacts
#********************************************************************************    

    ## Publish Web Artifacts
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: Web'
      enabled: True
      condition: and(succeeded(), eq(variables['PublishArtifact_Web'], 'True'))
      inputs:
        ArtifactName: Web
        PathtoPublish: '$(build.artifactstagingdirectory)\Web'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: NugetPackages'
      enabled: True
      condition: and(succeeded(), eq(variables['PublishArtifact_NugetPackages'], 'True'))
      inputs:
        ArtifactName: NugetPackages
        PathtoPublish: '$(build.artifactstagingdirectory)\Nuget'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: Databases'
      enabled: True
      condition: and(succeeded(), eq(variables['PublishArtifact_Databases'], 'True'))
      inputs:
        ArtifactName: Databases
        PathtoPublish: '$(build.artifactstagingdirectory)\Databases'
